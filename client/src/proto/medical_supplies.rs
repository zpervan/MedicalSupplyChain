// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `medical_supplies.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct Error {
    // message fields
    pub Code: ErrorCode,
    pub Message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Error {
    fn default() -> &'a Error {
        <Error as ::protobuf::Message>::default_instance()
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    // .medical_supplies.ErrorCode Code = 1;


    pub fn get_Code(&self) -> ErrorCode {
        self.Code
    }
    pub fn clear_Code(&mut self) {
        self.Code = ErrorCode::OK;
    }

    // Param is passed by value, moved
    pub fn set_Code(&mut self, v: ErrorCode) {
        self.Code = v;
    }

    // string Message = 2;


    pub fn get_Message(&self) -> &str {
        &self.Message
    }
    pub fn clear_Message(&mut self) {
        self.Message.clear();
    }

    // Param is passed by value, moved
    pub fn set_Message(&mut self, v: ::std::string::String) {
        self.Message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Message(&mut self) -> &mut ::std::string::String {
        &mut self.Message
    }

    // Take field
    pub fn take_Message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Error {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.Code, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.Code != ErrorCode::OK {
            my_size += ::protobuf::rt::enum_size(1, self.Code);
        }
        if !self.Message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.Code != ErrorCode::OK {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.Code))?;
        }
        if !self.Message.is_empty() {
            os.write_string(2, &self.Message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Error {
        Error::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorCode>>(
                "Code",
                |m: &Error| { &m.Code },
                |m: &mut Error| { &mut m.Code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Message",
                |m: &Error| { &m.Message },
                |m: &mut Error| { &mut m.Message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Error>(
                "Error",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Error {
        static instance: ::protobuf::rt::LazyV2<Error> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Error::new)
    }
}

impl ::protobuf::Clear for Error {
    fn clear(&mut self) {
        self.Code = ErrorCode::OK;
        self.Message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub Data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // string Data = 1;


    pub fn get_Data(&self) -> &str {
        &self.Data
    }
    pub fn clear_Data(&mut self) {
        self.Data.clear();
    }

    // Param is passed by value, moved
    pub fn set_Data(&mut self, v: ::std::string::String) {
        self.Data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Data(&mut self) -> &mut ::std::string::String {
        &mut self.Data
    }

    // Take field
    pub fn take_Data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Data.is_empty() {
            os.write_string(1, &self.Data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Data",
                |m: &Request| { &m.Data },
                |m: &mut Request| { &mut m.Data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Request>(
                "Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Request {
        static instance: ::protobuf::rt::LazyV2<Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Request::new)
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.Data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DummyResponse {
    // message fields
    pub Data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DummyResponse {
    fn default() -> &'a DummyResponse {
        <DummyResponse as ::protobuf::Message>::default_instance()
    }
}

impl DummyResponse {
    pub fn new() -> DummyResponse {
        ::std::default::Default::default()
    }

    // string Data = 1;


    pub fn get_Data(&self) -> &str {
        &self.Data
    }
    pub fn clear_Data(&mut self) {
        self.Data.clear();
    }

    // Param is passed by value, moved
    pub fn set_Data(&mut self, v: ::std::string::String) {
        self.Data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Data(&mut self) -> &mut ::std::string::String {
        &mut self.Data
    }

    // Take field
    pub fn take_Data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DummyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Data.is_empty() {
            os.write_string(1, &self.Data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DummyResponse {
        DummyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Data",
                |m: &DummyResponse| { &m.Data },
                |m: &mut DummyResponse| { &mut m.Data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DummyResponse>(
                "DummyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DummyResponse {
        static instance: ::protobuf::rt::LazyV2<DummyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DummyResponse::new)
    }
}

impl ::protobuf::Clear for DummyResponse {
    fn clear(&mut self) {
        self.Data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DummyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DummyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UserResponse {
    // message fields
    pub Users: ::protobuf::RepeatedField<User>,
    pub Error: ::protobuf::SingularPtrField<Error>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserResponse {
    fn default() -> &'a UserResponse {
        <UserResponse as ::protobuf::Message>::default_instance()
    }
}

impl UserResponse {
    pub fn new() -> UserResponse {
        ::std::default::Default::default()
    }

    // repeated .medical_supplies.User Users = 1;


    pub fn get_Users(&self) -> &[User] {
        &self.Users
    }
    pub fn clear_Users(&mut self) {
        self.Users.clear();
    }

    // Param is passed by value, moved
    pub fn set_Users(&mut self, v: ::protobuf::RepeatedField<User>) {
        self.Users = v;
    }

    // Mutable pointer to the field.
    pub fn mut_Users(&mut self) -> &mut ::protobuf::RepeatedField<User> {
        &mut self.Users
    }

    // Take field
    pub fn take_Users(&mut self) -> ::protobuf::RepeatedField<User> {
        ::std::mem::replace(&mut self.Users, ::protobuf::RepeatedField::new())
    }

    // .medical_supplies.Error Error = 2;


    pub fn get_Error(&self) -> &Error {
        self.Error.as_ref().unwrap_or_else(|| <Error as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Error(&mut self) {
        self.Error.clear();
    }

    pub fn has_Error(&self) -> bool {
        self.Error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Error(&mut self, v: Error) {
        self.Error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Error(&mut self) -> &mut Error {
        if self.Error.is_none() {
            self.Error.set_default();
        }
        self.Error.as_mut().unwrap()
    }

    // Take field
    pub fn take_Error(&mut self) -> Error {
        self.Error.take().unwrap_or_else(|| Error::new())
    }
}

impl ::protobuf::Message for UserResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.Users {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.Users)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.Users {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.Error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.Users {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.Error.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UserResponse {
        UserResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<User>>(
                "Users",
                |m: &UserResponse| { &m.Users },
                |m: &mut UserResponse| { &mut m.Users },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Error>>(
                "Error",
                |m: &UserResponse| { &m.Error },
                |m: &mut UserResponse| { &mut m.Error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UserResponse>(
                "UserResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UserResponse {
        static instance: ::protobuf::rt::LazyV2<UserResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UserResponse::new)
    }
}

impl ::protobuf::Clear for UserResponse {
    fn clear(&mut self) {
        self.Users.clear();
        self.Error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EquipmentResponse {
    // message fields
    pub Items: ::protobuf::RepeatedField<Item>,
    pub Error: ::protobuf::SingularPtrField<Error>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EquipmentResponse {
    fn default() -> &'a EquipmentResponse {
        <EquipmentResponse as ::protobuf::Message>::default_instance()
    }
}

impl EquipmentResponse {
    pub fn new() -> EquipmentResponse {
        ::std::default::Default::default()
    }

    // repeated .medical_supplies.Item Items = 1;


    pub fn get_Items(&self) -> &[Item] {
        &self.Items
    }
    pub fn clear_Items(&mut self) {
        self.Items.clear();
    }

    // Param is passed by value, moved
    pub fn set_Items(&mut self, v: ::protobuf::RepeatedField<Item>) {
        self.Items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_Items(&mut self) -> &mut ::protobuf::RepeatedField<Item> {
        &mut self.Items
    }

    // Take field
    pub fn take_Items(&mut self) -> ::protobuf::RepeatedField<Item> {
        ::std::mem::replace(&mut self.Items, ::protobuf::RepeatedField::new())
    }

    // .medical_supplies.Error Error = 2;


    pub fn get_Error(&self) -> &Error {
        self.Error.as_ref().unwrap_or_else(|| <Error as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Error(&mut self) {
        self.Error.clear();
    }

    pub fn has_Error(&self) -> bool {
        self.Error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Error(&mut self, v: Error) {
        self.Error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Error(&mut self) -> &mut Error {
        if self.Error.is_none() {
            self.Error.set_default();
        }
        self.Error.as_mut().unwrap()
    }

    // Take field
    pub fn take_Error(&mut self) -> Error {
        self.Error.take().unwrap_or_else(|| Error::new())
    }
}

impl ::protobuf::Message for EquipmentResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.Items {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.Items)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.Items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.Error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.Items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.Error.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EquipmentResponse {
        EquipmentResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Item>>(
                "Items",
                |m: &EquipmentResponse| { &m.Items },
                |m: &mut EquipmentResponse| { &mut m.Items },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Error>>(
                "Error",
                |m: &EquipmentResponse| { &m.Error },
                |m: &mut EquipmentResponse| { &mut m.Error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EquipmentResponse>(
                "EquipmentResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EquipmentResponse {
        static instance: ::protobuf::rt::LazyV2<EquipmentResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EquipmentResponse::new)
    }
}

impl ::protobuf::Clear for EquipmentResponse {
    fn clear(&mut self) {
        self.Items.clear();
        self.Error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EquipmentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EquipmentResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct User {
    // message fields
    pub Id: ::std::string::String,
    pub Username: ::std::string::String,
    pub Password: ::std::string::String,
    pub Name: ::std::string::String,
    pub Surname: ::std::string::String,
    pub Role: ::std::string::String,
    pub Department: ::std::string::String,
    pub Created: ::std::string::String,
    pub LastLogin: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a User {
    fn default() -> &'a User {
        <User as ::protobuf::Message>::default_instance()
    }
}

impl User {
    pub fn new() -> User {
        ::std::default::Default::default()
    }

    // string Id = 1;


    pub fn get_Id(&self) -> &str {
        &self.Id
    }
    pub fn clear_Id(&mut self) {
        self.Id.clear();
    }

    // Param is passed by value, moved
    pub fn set_Id(&mut self, v: ::std::string::String) {
        self.Id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Id(&mut self) -> &mut ::std::string::String {
        &mut self.Id
    }

    // Take field
    pub fn take_Id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Id, ::std::string::String::new())
    }

    // string Username = 2;


    pub fn get_Username(&self) -> &str {
        &self.Username
    }
    pub fn clear_Username(&mut self) {
        self.Username.clear();
    }

    // Param is passed by value, moved
    pub fn set_Username(&mut self, v: ::std::string::String) {
        self.Username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Username(&mut self) -> &mut ::std::string::String {
        &mut self.Username
    }

    // Take field
    pub fn take_Username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Username, ::std::string::String::new())
    }

    // string Password = 3;


    pub fn get_Password(&self) -> &str {
        &self.Password
    }
    pub fn clear_Password(&mut self) {
        self.Password.clear();
    }

    // Param is passed by value, moved
    pub fn set_Password(&mut self, v: ::std::string::String) {
        self.Password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Password(&mut self) -> &mut ::std::string::String {
        &mut self.Password
    }

    // Take field
    pub fn take_Password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Password, ::std::string::String::new())
    }

    // string Name = 4;


    pub fn get_Name(&self) -> &str {
        &self.Name
    }
    pub fn clear_Name(&mut self) {
        self.Name.clear();
    }

    // Param is passed by value, moved
    pub fn set_Name(&mut self, v: ::std::string::String) {
        self.Name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Name(&mut self) -> &mut ::std::string::String {
        &mut self.Name
    }

    // Take field
    pub fn take_Name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Name, ::std::string::String::new())
    }

    // string Surname = 5;


    pub fn get_Surname(&self) -> &str {
        &self.Surname
    }
    pub fn clear_Surname(&mut self) {
        self.Surname.clear();
    }

    // Param is passed by value, moved
    pub fn set_Surname(&mut self, v: ::std::string::String) {
        self.Surname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Surname(&mut self) -> &mut ::std::string::String {
        &mut self.Surname
    }

    // Take field
    pub fn take_Surname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Surname, ::std::string::String::new())
    }

    // string Role = 6;


    pub fn get_Role(&self) -> &str {
        &self.Role
    }
    pub fn clear_Role(&mut self) {
        self.Role.clear();
    }

    // Param is passed by value, moved
    pub fn set_Role(&mut self, v: ::std::string::String) {
        self.Role = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Role(&mut self) -> &mut ::std::string::String {
        &mut self.Role
    }

    // Take field
    pub fn take_Role(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Role, ::std::string::String::new())
    }

    // string Department = 7;


    pub fn get_Department(&self) -> &str {
        &self.Department
    }
    pub fn clear_Department(&mut self) {
        self.Department.clear();
    }

    // Param is passed by value, moved
    pub fn set_Department(&mut self, v: ::std::string::String) {
        self.Department = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Department(&mut self) -> &mut ::std::string::String {
        &mut self.Department
    }

    // Take field
    pub fn take_Department(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Department, ::std::string::String::new())
    }

    // string Created = 8;


    pub fn get_Created(&self) -> &str {
        &self.Created
    }
    pub fn clear_Created(&mut self) {
        self.Created.clear();
    }

    // Param is passed by value, moved
    pub fn set_Created(&mut self, v: ::std::string::String) {
        self.Created = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Created(&mut self) -> &mut ::std::string::String {
        &mut self.Created
    }

    // Take field
    pub fn take_Created(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Created, ::std::string::String::new())
    }

    // string LastLogin = 9;


    pub fn get_LastLogin(&self) -> &str {
        &self.LastLogin
    }
    pub fn clear_LastLogin(&mut self) {
        self.LastLogin.clear();
    }

    // Param is passed by value, moved
    pub fn set_LastLogin(&mut self, v: ::std::string::String) {
        self.LastLogin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_LastLogin(&mut self) -> &mut ::std::string::String {
        &mut self.LastLogin
    }

    // Take field
    pub fn take_LastLogin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.LastLogin, ::std::string::String::new())
    }
}

impl ::protobuf::Message for User {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Username)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Password)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Surname)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Role)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Department)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Created)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.LastLogin)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Id);
        }
        if !self.Username.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Username);
        }
        if !self.Password.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.Password);
        }
        if !self.Name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.Name);
        }
        if !self.Surname.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.Surname);
        }
        if !self.Role.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.Role);
        }
        if !self.Department.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.Department);
        }
        if !self.Created.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.Created);
        }
        if !self.LastLogin.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.LastLogin);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Id.is_empty() {
            os.write_string(1, &self.Id)?;
        }
        if !self.Username.is_empty() {
            os.write_string(2, &self.Username)?;
        }
        if !self.Password.is_empty() {
            os.write_string(3, &self.Password)?;
        }
        if !self.Name.is_empty() {
            os.write_string(4, &self.Name)?;
        }
        if !self.Surname.is_empty() {
            os.write_string(5, &self.Surname)?;
        }
        if !self.Role.is_empty() {
            os.write_string(6, &self.Role)?;
        }
        if !self.Department.is_empty() {
            os.write_string(7, &self.Department)?;
        }
        if !self.Created.is_empty() {
            os.write_string(8, &self.Created)?;
        }
        if !self.LastLogin.is_empty() {
            os.write_string(9, &self.LastLogin)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> User {
        User::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Id",
                |m: &User| { &m.Id },
                |m: &mut User| { &mut m.Id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Username",
                |m: &User| { &m.Username },
                |m: &mut User| { &mut m.Username },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Password",
                |m: &User| { &m.Password },
                |m: &mut User| { &mut m.Password },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Name",
                |m: &User| { &m.Name },
                |m: &mut User| { &mut m.Name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Surname",
                |m: &User| { &m.Surname },
                |m: &mut User| { &mut m.Surname },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Role",
                |m: &User| { &m.Role },
                |m: &mut User| { &mut m.Role },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Department",
                |m: &User| { &m.Department },
                |m: &mut User| { &mut m.Department },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Created",
                |m: &User| { &m.Created },
                |m: &mut User| { &mut m.Created },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "LastLogin",
                |m: &User| { &m.LastLogin },
                |m: &mut User| { &mut m.LastLogin },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<User>(
                "User",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static User {
        static instance: ::protobuf::rt::LazyV2<User> = ::protobuf::rt::LazyV2::INIT;
        instance.get(User::new)
    }
}

impl ::protobuf::Clear for User {
    fn clear(&mut self) {
        self.Id.clear();
        self.Username.clear();
        self.Password.clear();
        self.Name.clear();
        self.Surname.clear();
        self.Role.clear();
        self.Department.clear();
        self.Created.clear();
        self.LastLogin.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for User {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for User {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Item {
    // message fields
    pub Id: ::std::string::String,
    pub Name: ::std::string::String,
    pub Description: ::std::string::String,
    pub ReceivedDate: ::std::string::String,
    pub TakenDate: ::std::string::String,
    pub ModifiedDate: ::std::string::String,
    pub Quantity: i32,
    pub Category: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Item {
    fn default() -> &'a Item {
        <Item as ::protobuf::Message>::default_instance()
    }
}

impl Item {
    pub fn new() -> Item {
        ::std::default::Default::default()
    }

    // string Id = 1;


    pub fn get_Id(&self) -> &str {
        &self.Id
    }
    pub fn clear_Id(&mut self) {
        self.Id.clear();
    }

    // Param is passed by value, moved
    pub fn set_Id(&mut self, v: ::std::string::String) {
        self.Id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Id(&mut self) -> &mut ::std::string::String {
        &mut self.Id
    }

    // Take field
    pub fn take_Id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Id, ::std::string::String::new())
    }

    // string Name = 2;


    pub fn get_Name(&self) -> &str {
        &self.Name
    }
    pub fn clear_Name(&mut self) {
        self.Name.clear();
    }

    // Param is passed by value, moved
    pub fn set_Name(&mut self, v: ::std::string::String) {
        self.Name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Name(&mut self) -> &mut ::std::string::String {
        &mut self.Name
    }

    // Take field
    pub fn take_Name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Name, ::std::string::String::new())
    }

    // string Description = 3;


    pub fn get_Description(&self) -> &str {
        &self.Description
    }
    pub fn clear_Description(&mut self) {
        self.Description.clear();
    }

    // Param is passed by value, moved
    pub fn set_Description(&mut self, v: ::std::string::String) {
        self.Description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Description(&mut self) -> &mut ::std::string::String {
        &mut self.Description
    }

    // Take field
    pub fn take_Description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Description, ::std::string::String::new())
    }

    // string ReceivedDate = 4;


    pub fn get_ReceivedDate(&self) -> &str {
        &self.ReceivedDate
    }
    pub fn clear_ReceivedDate(&mut self) {
        self.ReceivedDate.clear();
    }

    // Param is passed by value, moved
    pub fn set_ReceivedDate(&mut self, v: ::std::string::String) {
        self.ReceivedDate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ReceivedDate(&mut self) -> &mut ::std::string::String {
        &mut self.ReceivedDate
    }

    // Take field
    pub fn take_ReceivedDate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ReceivedDate, ::std::string::String::new())
    }

    // string TakenDate = 5;


    pub fn get_TakenDate(&self) -> &str {
        &self.TakenDate
    }
    pub fn clear_TakenDate(&mut self) {
        self.TakenDate.clear();
    }

    // Param is passed by value, moved
    pub fn set_TakenDate(&mut self, v: ::std::string::String) {
        self.TakenDate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_TakenDate(&mut self) -> &mut ::std::string::String {
        &mut self.TakenDate
    }

    // Take field
    pub fn take_TakenDate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.TakenDate, ::std::string::String::new())
    }

    // string ModifiedDate = 6;


    pub fn get_ModifiedDate(&self) -> &str {
        &self.ModifiedDate
    }
    pub fn clear_ModifiedDate(&mut self) {
        self.ModifiedDate.clear();
    }

    // Param is passed by value, moved
    pub fn set_ModifiedDate(&mut self, v: ::std::string::String) {
        self.ModifiedDate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ModifiedDate(&mut self) -> &mut ::std::string::String {
        &mut self.ModifiedDate
    }

    // Take field
    pub fn take_ModifiedDate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ModifiedDate, ::std::string::String::new())
    }

    // int32 Quantity = 7;


    pub fn get_Quantity(&self) -> i32 {
        self.Quantity
    }
    pub fn clear_Quantity(&mut self) {
        self.Quantity = 0;
    }

    // Param is passed by value, moved
    pub fn set_Quantity(&mut self, v: i32) {
        self.Quantity = v;
    }

    // string Category = 8;


    pub fn get_Category(&self) -> &str {
        &self.Category
    }
    pub fn clear_Category(&mut self) {
        self.Category.clear();
    }

    // Param is passed by value, moved
    pub fn set_Category(&mut self, v: ::std::string::String) {
        self.Category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Category(&mut self) -> &mut ::std::string::String {
        &mut self.Category
    }

    // Take field
    pub fn take_Category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Category, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Item {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ReceivedDate)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.TakenDate)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ModifiedDate)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.Quantity = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Category)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Id);
        }
        if !self.Name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Name);
        }
        if !self.Description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.Description);
        }
        if !self.ReceivedDate.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.ReceivedDate);
        }
        if !self.TakenDate.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.TakenDate);
        }
        if !self.ModifiedDate.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.ModifiedDate);
        }
        if self.Quantity != 0 {
            my_size += ::protobuf::rt::value_size(7, self.Quantity, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.Category.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.Category);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Id.is_empty() {
            os.write_string(1, &self.Id)?;
        }
        if !self.Name.is_empty() {
            os.write_string(2, &self.Name)?;
        }
        if !self.Description.is_empty() {
            os.write_string(3, &self.Description)?;
        }
        if !self.ReceivedDate.is_empty() {
            os.write_string(4, &self.ReceivedDate)?;
        }
        if !self.TakenDate.is_empty() {
            os.write_string(5, &self.TakenDate)?;
        }
        if !self.ModifiedDate.is_empty() {
            os.write_string(6, &self.ModifiedDate)?;
        }
        if self.Quantity != 0 {
            os.write_int32(7, self.Quantity)?;
        }
        if !self.Category.is_empty() {
            os.write_string(8, &self.Category)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Item {
        Item::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Id",
                |m: &Item| { &m.Id },
                |m: &mut Item| { &mut m.Id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Name",
                |m: &Item| { &m.Name },
                |m: &mut Item| { &mut m.Name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Description",
                |m: &Item| { &m.Description },
                |m: &mut Item| { &mut m.Description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ReceivedDate",
                |m: &Item| { &m.ReceivedDate },
                |m: &mut Item| { &mut m.ReceivedDate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "TakenDate",
                |m: &Item| { &m.TakenDate },
                |m: &mut Item| { &mut m.TakenDate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ModifiedDate",
                |m: &Item| { &m.ModifiedDate },
                |m: &mut Item| { &mut m.ModifiedDate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "Quantity",
                |m: &Item| { &m.Quantity },
                |m: &mut Item| { &mut m.Quantity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Category",
                |m: &Item| { &m.Category },
                |m: &mut Item| { &mut m.Category },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Item>(
                "Item",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Item {
        static instance: ::protobuf::rt::LazyV2<Item> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Item::new)
    }
}

impl ::protobuf::Clear for Item {
    fn clear(&mut self) {
        self.Id.clear();
        self.Name.clear();
        self.Description.clear();
        self.ReceivedDate.clear();
        self.TakenDate.clear();
        self.ModifiedDate.clear();
        self.Quantity = 0;
        self.Category.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Item {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Item {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorCode {
    OK = 0,
    NOT_FOUND = 1,
    INTERNAL_ERROR = 2,
    FATAL = 3,
}

impl ::protobuf::ProtobufEnum for ErrorCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorCode> {
        match value {
            0 => ::std::option::Option::Some(ErrorCode::OK),
            1 => ::std::option::Option::Some(ErrorCode::NOT_FOUND),
            2 => ::std::option::Option::Some(ErrorCode::INTERNAL_ERROR),
            3 => ::std::option::Option::Some(ErrorCode::FATAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorCode] = &[
            ErrorCode::OK,
            ErrorCode::NOT_FOUND,
            ErrorCode::INTERNAL_ERROR,
            ErrorCode::FATAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ErrorCode>("ErrorCode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ErrorCode {
}

impl ::std::default::Default for ErrorCode {
    fn default() -> Self {
        ErrorCode::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16medical_supplies.proto\x12\x10medical_supplies\x1a\x1bgoogle/proto\
    buf/empty.proto\"R\n\x05Error\x12/\n\x04Code\x18\x01\x20\x01(\x0e2\x1b.m\
    edical_supplies.ErrorCodeR\x04Code\x12\x18\n\x07Message\x18\x02\x20\x01(\
    \tR\x07Message\"\x1d\n\x07Request\x12\x12\n\x04Data\x18\x01\x20\x01(\tR\
    \x04Data\"#\n\rDummyResponse\x12\x12\n\x04Data\x18\x01\x20\x01(\tR\x04Da\
    ta\"k\n\x0cUserResponse\x12,\n\x05Users\x18\x01\x20\x03(\x0b2\x16.medica\
    l_supplies.UserR\x05Users\x12-\n\x05Error\x18\x02\x20\x01(\x0b2\x17.medi\
    cal_supplies.ErrorR\x05Error\"p\n\x11EquipmentResponse\x12,\n\x05Items\
    \x18\x01\x20\x03(\x0b2\x16.medical_supplies.ItemR\x05Items\x12-\n\x05Err\
    or\x18\x02\x20\x01(\x0b2\x17.medical_supplies.ErrorR\x05Error\"\xe8\x01\
    \n\x04User\x12\x0e\n\x02Id\x18\x01\x20\x01(\tR\x02Id\x12\x1a\n\x08Userna\
    me\x18\x02\x20\x01(\tR\x08Username\x12\x1a\n\x08Password\x18\x03\x20\x01\
    (\tR\x08Password\x12\x12\n\x04Name\x18\x04\x20\x01(\tR\x04Name\x12\x18\n\
    \x07Surname\x18\x05\x20\x01(\tR\x07Surname\x12\x12\n\x04Role\x18\x06\x20\
    \x01(\tR\x04Role\x12\x1e\n\nDepartment\x18\x07\x20\x01(\tR\nDepartment\
    \x12\x18\n\x07Created\x18\x08\x20\x01(\tR\x07Created\x12\x1c\n\tLastLogi\
    n\x18\t\x20\x01(\tR\tLastLogin\"\xea\x01\n\x04Item\x12\x0e\n\x02Id\x18\
    \x01\x20\x01(\tR\x02Id\x12\x12\n\x04Name\x18\x02\x20\x01(\tR\x04Name\x12\
    \x20\n\x0bDescription\x18\x03\x20\x01(\tR\x0bDescription\x12\"\n\x0cRece\
    ivedDate\x18\x04\x20\x01(\tR\x0cReceivedDate\x12\x1c\n\tTakenDate\x18\
    \x05\x20\x01(\tR\tTakenDate\x12\"\n\x0cModifiedDate\x18\x06\x20\x01(\tR\
    \x0cModifiedDate\x12\x1a\n\x08Quantity\x18\x07\x20\x01(\x05R\x08Quantity\
    \x12\x1a\n\x08Category\x18\x08\x20\x01(\tR\x08Category*A\n\tErrorCode\
    \x12\x06\n\x02OK\x10\0\x12\r\n\tNOT_FOUND\x10\x01\x12\x12\n\x0eINTERNAL_\
    ERROR\x10\x02\x12\t\n\x05FATAL\x10\x032\xcb\x05\n\x0fMedicalSupplies\x12\
    K\n\x0bTestRequest\x12\x19.medical_supplies.Request\x1a\x1f.medical_supp\
    lies.DummyResponse\"\0\x12F\n\nCreateUser\x12\x16.medical_supplies.User\
    \x1a\x1e.medical_supplies.UserResponse\"\0\x12F\n\nFetchUsers\x12\x16.go\
    ogle.protobuf.Empty\x1a\x1e.medical_supplies.UserResponse\"\0\x12I\n\nUp\
    dateUser\x12\x19.medical_supplies.Request\x1a\x1e.medical_supplies.UserR\
    esponse\"\0\x12F\n\nDeleteUser\x12\x16.medical_supplies.User\x1a\x1e.med\
    ical_supplies.UserResponse\"\0\x12P\n\x0fInsertEquipment\x12\x16.medical\
    _supplies.Item\x1a#.medical_supplies.EquipmentResponse\"\0\x12O\n\x0eFet\
    chEquipment\x12\x16.google.protobuf.Empty\x1a#.medical_supplies.Equipmen\
    tResponse\"\0\x12P\n\x0fUpdateEquipment\x12\x16.medical_supplies.User\
    \x1a#.medical_supplies.EquipmentResponse\"\0\x12S\n\x0fDeleteEquipment\
    \x12\x19.medical_supplies.Request\x1a#.medical_supplies.EquipmentRespons\
    e\"\0B\x20Z\x1emessage.proto/medical_suppliesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
